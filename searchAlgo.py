import heapq

def dijkstra(graph, start):
    # Initialize distances and predecessors
    distances = {node: float('infinity') for node in graph}
    distances[start] = 0
    predecessors = {node: None for node in graph}

    # Priority queue to store (distance, node) pairs
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        # Check if a shorter path is found
        if current_distance > distances[current_node]:
            continue

        # Explore neighbors
        for neighbor, cost in graph[current_node]:
            distance = current_distance + cost

            # Update if a shorter path is found
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                predecessors[neighbor] = current_node
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances, predecessors

# Your graph representation
graph = {
    1: [(2, 5), (3, 8), (4, 4), (5, 10), (6, 7)],
    2: [(1, 5), (3, 6), (7, 5), (8, 7), (9, 3), (10, 2), (11, 7), (12, 8)],
    3: [(1, 8), (2, 6), (9, 2), (10, 5), (11, 7), (12, 8)],
    4: [(1, 4), (5, 7), (11, 3), (12, 6), (13, 1), (14, 8), (15, 3)],
    5: [(1, 10), (4, 7), (13, 4), (14, 9), (15, 8), (16, 1), (17, 9), (18, 5)],
    6: [(1, 7), (15, 8), (16, 5), (17, 5), (18, 1), (19, 10)],
    7: [(2, 9), (17, 4), (18, 6), (19, 7), (20, 5), (21, 7), (22, 3)],
    8: [(2, 3), (19, 7), (20, 5), (21, 2), (22, 7), (23, 8), (24, 5)],
    9: [(3, 2), (21, 8), (22, 4), (23, 6), (24, 2), (25, 5), (26, 9), (27, 6)],
    10: [(3, 5), (23, 6), (24, 7), (25, 8), (26, 9), (27, 10), (28, 5)],
    11: [(3, 7), (4, 3), (25, 5), (26, 9), (27, 6), (28, 7), (29, 10)],
    12: [(4, 6), (27, 4), (28, 7), (29, 10), (30, 3), (13, 1), (14, 8), (15, 3)],
    13: [(5, 4), (29, 6), (30, 8), (14, 9), (15, 1), (16, 5), (17, 7), (18, 3)],
    14: [(5, 9), (13, 1), (29, 10), (30, 7), (15, 8), (16, 6), (17, 4), (18, 1), (19, 9), (20, 7)],
    15: [(6, 8), (7, 3), (13, 5), (14, 8), (16, 2), (17, 9), (18, 10), (19, 4), (20, 6), (21, 7)],
    16: [(6, 6), (15, 2), (13, 7), (14, 6), (17, 10), (18, 3), (19, 7), (20, 5), (21, 8), (22, 6)],
    17: [(7, 8), (8, 3), (13, 9), (14, 4), (15, 9), (16, 10), (19, 5), (20, 2), (21, 3), (22, 9)],
    18: [(7, 9), (8, 10), (13, 4), (14, 1), (15, 10), (16, 3), (19, 8), (20, 9), (21, 2), (22, 7)],
    19: [(8, 6), (9, 9), (13, 8), (14, 9), (15, 4), (16, 7), (17, 5), (18, 8), (20, 3), (21, 6), (22, 4), (23, 2), (24, 8), (25, 10)],
    20: [(8, 1), (9, 10), (13, 6), (14, 7), (15, 6), (16, 5), (17, 2), (18, 9), (19, 3), (21, 1), (22, 8), (23, 4), (24, 6), (25, 3), (26, 9), (27, 10)],
    21: [(9, 1), (10, 7), (13, 2), (14, 4), (15, 7), (16, 8), (17, 3), (18, 2), (19, 6), (20, 1), (22, 6), (23, 7), (24, 9), (25, 5), (26, 8), (27, 10)],
    22: [(9, 5), (10, 6), (13, 3), (14, 8), (15, 5), (16, 6), (17, 9), (18, 7), (19, 4), (20, 8), (21, 6), (23, 2), (24, 4), (25, 7), (26, 10), (27, 8), (28, 9)],
    23: [(10, 2), (21, 7), (22, 2), (13, 1), (14, 9), (15, 8), (16, 9), (17, 1), (18, 8), (19, 2), (20, 4), (24, 5), (25, 10), (26, 1), (27, 3), (28, 6), (29, 4), (30, 7)],
    24: [(10, 1), (21, 8), (22, 4), (13, 7), (14, 6), (15, 9), (16, 1), (17, 4), (18, 5), (19, 8), (20, 6), (23, 5), (25, 6), (26, 9), (27, 1), (28, 3), (29, 5), (30, 2)],
    25: [(11, 2), (23, 10), (24, 6), (13, 9), (14, 1), (15, 10), (16, 8), (17, 6), (18, 4), (19, 10), (20, 3), (21, 5), (22, 7), (26, 4), (27, 5), (28, 7), (29, 8), (30, 9)],
    26: [(11, 3), (23, 1), (24, 9), (13, 10), (14, 2), (15, 4), (16, 3), (17, 8), (18, 6), (19, 2), (20, 9), (21, 8), (22, 10), (27, 9), (28, 1), (29, 2), (30, 6)],
    27: [(12, 7), (25, 5), (26, 9), (13, 4), (14, 10), (15, 1), (16, 5), (17, 2), (18, 9), (19, 3), (20, 10), (21, 10), (22, 8), (28, 2), (29, 3), (30, 8)],
    28: [(12, 8), (25, 4), (26, 1), (13, 5), (14, 3), (15, 2), (16, 4), (17, 5), (18, 10), (19, 5), (20, 2), (21, 4), (22, 9), (27, 2), (29, 10), (30, 7)],
    29: [(13, 6), (25, 7), (26, 10), (14, 4), (15, 3), (16, 7), (17, 7), (18, 3), (19, 1), (20, 4), (21, 3), (22, 10), (27, 3), (28, 10), (30, 6)],
    30: [(13, 8), (25, 1), (26, 6), (14, 5), (15, 6), (16, 10), (17, 1), (18, 6), (19, 7), (20, 8), (21, 5), (22, 1), (27, 8), (28, 7), (29, 6)],
}

# Starting node
start_node = 1

# Run Dijkstra's algorithm
distances, predecessors = dijkstra(graph, start_node)

# Print the results
for node, distance in distances.items():
    print(f"Shortest distance from {start_node} to {node}: {distance}")

# Optionally, you can print the shortest paths
for node, predecessor in predecessors.items():
    path = [node]
    while predecessor is not None:
        path.insert(0, predecessor)
        predecessor = predecessors[predecessor]
    print(f"Shortest path from {start_node} to {node}: {path}")
